version: 2.1

commands:
  aws-configure:
    description: Configure AWS account for each docker container.
    steps:
      - run: aws configure set default.region $AWS_DEFAULT_REGION
      - run: aws configure set aws_access_key_if $AWS_ACCESS_KEY_ID
      - run: aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
  
  workspace-using-preparation:
    description: Install tar and gzip package to use workspace.
    steps:
      - run: |
          yum update
          yum install -y tar gzip
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            curl -H "token: qwer" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >> > SUCCESS
            cat SUCCESS
            if grep -q "has been executed successfully." SUCCESS 
            then
              echo "Revert because of success"
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            else
              echo "Do nothing"
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run: |
          cd frontend
          npm i
          npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run: |
          cd backend
          npm i
          npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run: |
          cd frontend
          npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run: |
          cd backend
          npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      # Configure AWS account
      - aws-configure
      # Install tar, gzip packages to use workspace.
      - workspace-using-preparation
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"               
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Get new backend url
          command: >-
            aws ec2 describe-instances
            --query 'Reservations[*].Instances[*].PublicDnsName'
            --filters "Name=tag:project,Values=udapeople" "Name=instance.group-name,Values=UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BasicSG"
            --output text > backend_url  
      - run:
          name: Save backend url to memstash.io
          command: >-
            curl -H "Content-Type: text/plain" -H "token: asdfjkl" 
            --request PUT --data "$(<backend_url)" https://api.memstash.io/values/udapeople-backend-url
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here 
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" "Name=instance.group-name,Values=UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}-BasicSG"\
              --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Check the contents of inventory.txt
          command: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["c9:ae:c8:91:98:18:d9:34:ea:0d:f3:87:b9:8c:fd:91"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk --no-cache update
            apk add --update ansible
            apk add --update openssh-client
            pip3 --no-cache-dir install awscli
      - aws-configure
      - run:
          name: Check workspace path and contents
          command: |
            echo "pwd"
            pwd                    # The result is /root/project
            # echo "inventory.txt"
            # cat inventory.txt -> There isn't /root/project/inventory.txt
            #echo "~/inventory.txt"
            #cat ~/inventory.txt -> ~/ means /root/. And there isn't /root/project/inventory.txt
            echo "~/project/.circleci/ansible/inventory.txt"
            cat ~/project/.circleci/ansible/inventory.txt
            echo "ls"
            ls
      - run:
          name: Make .env file in backend.
          command: |
            echo NODE_ENV=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - persist_to_workspace:
          root: .
          paths:
            - "backend/.env"
      - run:
          name: Configure server
          command: |
            # Your code here
            # tar -czvf backend.tar.gz backend
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: node:12.20-buster
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install aws-cli
          command: |
            apt-get update
            apt-get upgrade
            apt-get install -y less
            apt-get install -y curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - aws-configure
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            cat .env
            npm i
            # npm audit fix --audit-level=critical --force
            npm run migrations > migration_output
            echo "Migration output result"
            cat migration_output
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            curl -H "Content-Type: text/plain" -H "token: qwer" \
              --request PUT --data "$(cat backend/migration_output)" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - aws-configure
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum update
            yum install -y tar gzip
      - run:
          name: Get backend url and Deploy frontend objects
          command: |
            # your code here
            curl -H "token: asdfjkl" --request GET https://api.memstash.io/values/udapeople-backend-url > backend_url
            export API_URL="http://$(<backend_url):3030"
            echo "API_URL=${API_URL}" >> frontend/.env
            echo NODE_ENV=production >> frontend/.env
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
            . ~/.nvm/nvm.sh
            nvm install v9.4.0
            cd frontend
            npm i
            npm run build
            aws s3 sync ./dist s3://"udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --delete
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["c9:ae:c8:91:98:18:d9:34:ea:0d:f3:87:b9:8c:fd:91"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk --no-cache update
            apk add --update less
            apk add --update curl
            apk add --update ansible
            apk add --update openssh-client
            pip3 --no-cache-dir install awscli
      - aws-configure
      - run:
          name: Deploy backend
          command: |
            # your code here
            cat ~/backend/.env
            mv ~/backend/.env backend/.env
            cat backend/.env
            cat .circleci/ansible/inventory.txt
            tar -czvf backend.tar.gz backend
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:latest 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk --no-cache update
            apk add --update less
            apk add --update curl
            apk --no-cache add python3
            apk --no-cache add py3-pip
            pip3 --no-cache-dir install awscli
      - aws-configure
      - run:
          name: Get backend url
          command: |
            # your code here
            curl -H "token: asdfjkl" --request GET https://api.memstash.io/values/udapeople-backend-url > backend_url
            # Remove line breaks if there is in backend_url
            echo $(tr -d "\n" < backend_url) > backend_url
            cat backend_url
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            if curl -s "http://$(cat backend_url):3030/api/status"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.ap-northeast-2.amazonaws.com"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              echo "Access Success"
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - aws-configure
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum update
            yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation list-exports \
              --query "Exports[?Name=='WorkflowID'].Value" \
              --no-paginate --output text > OldWorkflowID.txt
            cat OldWorkflowID.txt
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-prod \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - persist_to_workspace:
          root: .
          paths:
            - "OldWorkflowID.txt"
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - aws-configure
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum update
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id and remove old stacks and files
          command: |
            # your code here
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo "${OldWorkflowID}"
            echo "${STACKS}"
            # Delete stacks only related with OldWorkflowID.
            for id in "${STACKS[@]}"
            do
              echo $id
              if [[ ${id: -7} == "${OldWorkflowID}" ]]
              then
                # your code here
                echo $id
                if [[ "${id:10:5}" == "front" ]]
                then
                  aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                  aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                  echo "Delete old S3 and frontend stack"
                elif [[ "${id:10:4}" == "back" ]]
                then
                  aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                  echo "Delete old backend stack"
                else
                  echo "Something wrong happened?"
                fi 
              else
                echo "Should not delete newly launched stacks and other stacks"
              fi
            done

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]